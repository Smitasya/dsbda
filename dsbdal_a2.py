# -*- coding: utf-8 -*-
"""Akanksha_DSBDAL_A2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kq9YKSUBT0C5u_8vRvXIR-ktssdts5Sn

# **Data Wrangling II**

**Importibg Libraries.**
"""

import pandas as pd
import numpy as np

"""**Upload dataset**"""

from google.colab import files
files.upload()

"""**Initializing dataframe**"""

df=pd.read_excel("/content/Academic_perf.xlsx")

df

df.head()

df.info()

df.describe(include="all")

df.shape

df.dtypes

df.columns

df[15:22]

df.loc[0:6]

df.loc[0:6,'DSBDA':'CC']

df.iloc[1:3]

df.iloc[1:5,1:5]

"""**Identification and Handling of Null Values**"""

df.isnull()

df.isna()

df.isnull().any()



df.isnull().sum()

df.DSBDA.isnull().sum()

df.WT.isnull().sum()

cols_with_na = []
for col in df.columns:
    if df[col].isna().any():
       cols_with_na.append(col)
cols_with_na

"""**Filling missing values using dropna(), fillna(), replace() :**"""

df.replace(np.nan,value=0)

df.fillna(1)

df['DSBDA']=df['DSBDA'].fillna(df['DSBDA'].mean())

df['WT']=df['WT'].fillna(df['WT'].mean())

df.head(16)

df.dropna()

df.dropna(how="all")

df.dropna(axis=1)

df.dropna(axis=0,how='any',inplace=True)

df

"""**Identification and Handling of Outliers**"""

import seaborn as sns
import matplotlib.pyplot as plt

"""**Box Plot**"""

df.boxplot()

sns.boxplot(x=df.WT)

sns.boxplot(x=df.TotalMarks)

sns.boxplot(x=df.Percentage)

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (9, 6)
df_list = ['CC','WT','TotalMarks','Percentage']
fig, axes = plt.subplots(2, 2)
fig.set_dpi(120)

count=0
for r in range(2):
   for c in range(2):
       _ = df[df_list[count]].plot(kind = 'box', ax=axes[r,c])
       count+=1

"""**Detecting outliers using Inter Quantile Range(IQR):**"""

Q1 = df['WT'].quantile(0.25)
Q3 = df['WT'].quantile(0.75)
IQR = Q3 - Q1
Lower_limit = Q1 - 1.5 * IQR
Upper_limit = Q3 + 1.5 * IQR
print(f'Q1 = {Q1}, Q3 = {Q3}, IQR = {IQR}, Lower_limit = {Lower_limit}, Upper_limit = {Upper_limit}')

Q1 = df['TotalMarks'].quantile(0.25)
Q3 = df['TotalMarks'].quantile(0.75)
IQR = Q3 - Q1
Lower_limit = Q1 - 1.5 * IQR
Upper_limit = Q3 + 1.5 * IQR
print(f'Q1 = {Q1}, Q3 = {Q3}, IQR = {IQR}, Lower_limit = {Lower_limit}, Upper_limit = {Upper_limit}')

Q1 = df['Percentage'].quantile(0.25)
Q3 = df['Percentage'].quantile(0.75)
IQR = Q3 - Q1
Lower_limit = Q1 - 1.5 * IQR
Upper_limit = Q3 + 1.5 * IQR
print(f'Q1 = {Q1}, Q3 = {Q3}, IQR = {IQR}, Lower_limit = {Lower_limit}, Upper_limit = {Upper_limit}')

df[(df['WT'] < Lower_limit) | (df['WT'] > Upper_limit)]

df[(df['TotalMarks'] < Lower_limit) | (df['TotalMarks'] > Upper_limit)]

df[(df['Percentage'] < Lower_limit) | (df['Percentage'] > Upper_limit)]

"""**Handling of Outliers**

  **1.removing the outlier:**
"""

outliers_WT=[]
for i in df.WT:
    if i<Lower_limit or i>Upper_limit:
       outliers_WT.append(i)
print("outliers are",outliers_WT)

outliers_TotM=[]
for i in df.TotalMarks:
    if i<Lower_limit or i>Upper_limit:
       outliers_TotM.append(i)
print("outliers are",outliers_TotM)

outliers_Perc=[]
for i in df.Percentage:
    if i<Lower_limit or i>Upper_limit:
       outliers_Perc.append(i)
print("outliers are",outliers_Perc)

df[df.WT<Lower_limit].index

df[df.TotalMarks<Lower_limit].index

df[df.Percentage<Lower_limit].index

df1=df.drop(df[df.WT<Lower_limit].index)

df1=df.drop(df[df.Percentage<Lower_limit].index)

df1=df.drop(df[df.TotalMarks<Lower_limit].index)

df1.shape

df2=df[df.WT<Lower_limit]
df2

df2=df[df.TotalMarks<Lower_limit]
df2

df2=df[df.Percentage<Lower_limit]
df2

"""**2.Mean/Median imputation**"""

sns.kdeplot(df.WT)

sns.kdeplot(df1.WT)

sns.kdeplot(df.TotalMarks)

sns.kdeplot(df1.TotalMarks)

sns.kdeplot(df.Percentage)

sns.kdeplot(df1.Percentage)

df.WT

df.TotalMarks

df.Percentage

log_wt=np.log(df.WT)
log_wt

sns.kdeplot(log_wt)

log_perc=np.log(df.Percentage)
log_perc

sns.kdeplot(log_perc)

log_tm=np.log(df.TotalMarks)
log_tm

sns.kdeplot(log_tm)

"""**DATA TRANSFORMATION**

**1. Checking the distribution with Skewness**
"""

import seaborn as sns

df.skew()

"""**Checking the distribution of variables using KDE plot**"""

sns.kdeplot(df.DSBDA);

sns.kdeplot(df.CC);

sns.kdeplot(df.WT);

sns.kdeplot(df.TotalMarks);

sns.kdeplot(df.Percentage);