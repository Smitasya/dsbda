# -*- coding: utf-8 -*-
"""Practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qwhkG2QBfehvZTgKVr715IXFfpBiqszr

# **Exp 1: Data Wrangling**
"""

import pandas as pd
import numpy as np
import seaborn as sns

sns.get_dataset_names()

df=sns.load_dataset('iris')

df

df.head()

df.tail()

df.info()

df.describe(include='all')

df.shape

df.dtypes

from sklearn import preprocessing

df.head()

min_max_scaler=preprocessing.MinMaxScaler()

x_new=df.iloc[:,:4]
x_new

x=min_max_scaler.fit_transform(x_new)

n_x=pd.DataFrame(x)

n_x

df['species'].unique()

le=preprocessing.LabelEncoder()

df['species']=le.fit_transform(df['species'])

df['species'].unique()

"""## **Experiment 02-DAta Wrangling 2**"""

import pandas as pd
import numpy as np

from google.colab import files
files.upload()

data=pd.read_excel("/content/acad_perf (1).xlsx")

data.head()

data.tail()

data.info()

data.columns

data.isna()

data.isna().sum()

data.replace(np.nan,value=0)

data['WT']=data['WT'].fillna(data['WT'].mean())

data.isna().sum()

data['DSBDSA']=data['DSBDSA'].fillna(data['DSBDSA'].mean())

data['AI']=data['AI'].fillna(data['AI'].mean())

data.isna().sum()

import seaborn as sns
import matplotlib.pyplot as plt

data.boxplot()

sns.boxplot(x=data.WT)

sns.boxplot(x=data['AI'])

sns.boxplot(x=data['Total'])

Q1=data['Total'].quantile(0.25)
Q3=data['Total'].quantile(0.75)
IQR=Q3-Q1
print(IQR)

Lower_limit=Q1-1.5*IQR
Upper_limit=Q3+1.5*IQR
print(Lower_limit)
print(Upper_limit)

outliers=[]
for i in data.Total:
  if i<Lower_limit or i >Upper_limit:
    outliers.append(i)
print("Outliers are: ",outliers)











"""# **Exp 3:Statistics**"""

from google.colab import files
files.upload()

ac=pd.read_excel("/content/a3 (1).xlsx")

ac

summary=ac.groupby("GENDER")["INCOME"].describe()
summary

ac.groupby("GENDER")["INCOME"].min()

ac.groupby("GENDER")["INCOME"].max()

ac.groupby("GENDER")["INCOME"].mean()

ac.groupby("GENDER")["INCOME"].std()

ac.groupby("GENDER")["INCOME"].median()

ac.groupby("GENDER")["INCOME"].quantile(0.25)

ac.groupby("GENDER")["INCOME"].quantile(0.5)

ac.groupby("GENDER")["INCOME"].quantile(0.75)

sns.get_dataset_names()

iris=sns.load_dataset('iris')

iris.describe(include="all")

idata=iris.groupby('species')

idata

setosa_data=idata.get_group('setosa')
versicolor_data=idata.get_group('versicolor')
verginica_data=idata.get_group('virginica')

print("Statistical details for Setosa:")
print(setosa_data.describe())

print("Statistical details for Verginica:")
print(verginica_data.describe())

print("Statistical details for Versicolor:")
print(versicolor_data.describe())

"""# **Exp 4:Linear Regression**"""

from google.colab import files
files.upload()

bh=pd.read_csv("/content/boston.csv")

bh.head()

bh

bh.isna().sum()

x=bh.drop(['MEDV'],axis=1)
y=bh['MEDV']

x

y

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)

import sklearn

from sklearn.linear_model import LinearRegression

lm=LinearRegression()
model=lm.fit(xtrain,ytrain)

model

ytrain_pred=lm.predict(xtrain)
ytrain_pred

ytest_pred=lm.predict(xtest)
ytest_pred

df=pd.DataFrame(ytrain_pred,ytrain)
df

from sklearn.metrics import mean_squared_error,r2_score

mse_test=mean_squared_error(ytest_pred,ytest)
mse_test

mse_train=mean_squared_error(ytrain_pred,ytrain)
mse_train

rmse_test=np.sqrt(mse_test)
rmse_test

rmse_train=np.sqrt(mse_train)
rmse_train

plt.scatter(ytrain,ytrain_pred,c="blue",marker='o',label='Training Dataset')
plt.scatter(ytest,ytest_pred,c= 'lightgreen',marker='o',label='Testing dataset')
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('True values vs Predicted values')
plt.plot()
plt.show()

"""# **Exp 5: Logistic Regression**"""

from google.colab import files
files.upload()

ads=pd.read_csv("/content/Social_Network_Ads.csv")

ads

ads.shape

ads.isna().sum()

x=ads.drop('Purchased',axis=1)
x

y=ads['Purchased']
y

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)

import sklearn

from sklearn.linear_model import LogisticRegression

lg=LogisticRegression()
model=lg.fit(xtrain,ytrain)
model

ypred=model.predict(xtest)

from sklearn.metrics import precision_score,confusion_matrix,accuracy_score,recall_score,classification_report

cm=confusion_matrix(ytest,ypred)
print("CONFUSION MATRIX IS :  ")
cm

ac_score=accuracy_score(ytest,ypred)
ac_score

err=1-ac_score
err

ps=precision_score(ytest,ypred)
ps

rs=recall_score(ytest,ypred)
rs

cr=classification_report(ytest,ypred)
print(cr)

"""# ** Exp 6:Naive Bayes Classification**"""

id=sns.load_dataset('iris')

id

x=id.drop('species',axis=1)
x

y=id['species']
y

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.naive_bayes import GaussianNB

gnb=GaussianNB()

gnb.fit(xtrain,ytrain)

ypred=gnb.predict(xtest)

print(ypred)

from sklearn.metrics import precision_score,confusion_matrix,accuracy_score,recall_score,classification_report

cr=classification_report(ytest,ypred)
print(cr)

cm=confusion_matrix(ytest,ypred)
print("CONFUSION MATRIX IS :  ")
cm

ac_score=accuracy_score(ytest,ypred)
ac_score

err=1-ac_score
err

ps=precision_score(ytest,ypred,average='macro')
ps

rs=recall_score(ytest,ypred,average='macro')
rs

a=("(1+e^-x)-1")



print("Sigmoid function is : `")



"""# **Exp:8 Data Visualization I**"""

import pandas as pd
import numpy as np
import seaborn as sns

sns.get_dataset_names()

ship=sns.load_dataset("titanic")

ship

ship.head()

sns.histplot(ship['fare'])

sns.distplot(ship['fare'])

sns.jointplot(x='age',y='fare',data=ship)

sns.pairplot(ship)

sns.boxplot(x='sex',y='age',data=ship,hue='survived')

"""## **Exp :9 Data VIsualization II**"""

ship.head()

sns.boxplot(x='sex',y='age',data=ship,hue='survived')

sns.scatterplot(x='age',y='sex',data=ship,hue='survived')

sns.barplot(x='sex',y='age',data=ship,hue='survived')

sns.violinplot(x='sex',y='age',data=ship,hue='survived')

"""## **Exp:10 Data Visualization III**

1)data preprocessing,null values,statistical measures
"""

flower=sns.load_dataset('iris')

flower

sns.histplot(flower['petal_length'],kde=True,bins=10)

sns.boxplot(flower['petal_length'])

sns.boxplot(flower)

sns.boxplot(flower['sepal_width'])

